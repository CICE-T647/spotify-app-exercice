node {

  def openshiftApi = 'https://172.17.0.1:8443'
  def serviceName = 'openshift-jenkins-nodejs-example'
  def serviceDomain = 'myproject'
  def email_people = 'yourEmail@email.co.nz'


  stage('1. Clean workspace') {
      deleteDir()
  }

  stage('2. Build from master') {

     try {
            openshiftBuild(
               apiURL: openshiftApi,
               bldCfg: serviceName,
               namespace: serviceDomain,
               env: [
                   [ name: "BUILD_TYPE", value: "SNAPSHOT" ],
                   [ name: "BUILDER_ARGS", value: "build test --daemon" ]
               ],
               verbose: "true",
               commitID: "",
               buildName: "",
               showBuildLogs: "true",
               checkForTriggeredDeployments: "true",
               waitTime: "30",
               waitUnit: "min"
             )
           currentBuild.result = 'SUCCESS'
       } catch (any) {
           currentBuild.result = 'FAILURE'
           throw any //rethrow exception to prevent the build from proceeding
       } finally {
           step([$class: 'Mailer', notifyEveryUnstableBuild: true, recipients: email_people, sendToIndividuals: true])
       }
  }

  stage('3. Deploy to DEV') {
         try {
          openshiftTag(
            apiURL: openshiftApi,
            authToken: env.OPENSHIFT_TOKEN,
            verbose: "true",
            namespace: serviceDomain,
            srcStream: serviceName,
            srcTag: "latest",
            destStream: serviceName,
            destTag: "dev"
          )
          openshiftDeploy(
            apiURL: openshiftApi,
            authToken: env.OPENSHIFT_TOKEN,
            verbose: "true",
            namespace: serviceDomain,
            waitTime: "30",
            waitUnit: "min",
            depCfg: serviceName
          )
           currentBuild.result = 'SUCCESS'
       } catch (any) {
           currentBuild.result = 'FAILURE'
           throw any //rethrow exception to prevent the build from proceeding
       } finally {
           step([$class: 'Mailer', notifyEveryUnstableBuild: true, recipients: email_people, sendToIndividuals: true])
       }

  }
}